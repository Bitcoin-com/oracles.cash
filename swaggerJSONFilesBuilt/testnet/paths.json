{
	"paths": {
		"/address/details/{address}": {
			"get": {
				"tags": [
					"address"
				],
				"summary": "Address details single",
				"description": "Returns the details of an address including balance",
				"operationId": "detailsSingle",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address in cashAddr or legacy",
						"required": true,
						"example": "bchtest:qz35h5mfa8w2pqma2jq06lp7dnv5fxkp2svtllzmlf",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressDetails"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/address/details": {
			"post": {
				"tags": [
					"address"
				],
				"summary": "Address details bulk",
				"description": "Returns the details of multiple addresses",
				"operationId": "detailsBulk",
				"requestBody": {
					"description": "Array of addresses",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Addresses"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressDetailsArray"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/address/utxo/{address}": {
			"get": {
				"tags": [
					"address"
				],
				"summary": "Address utxos single",
				"description": "Returns the list of utxo for an address",
				"operationId": "utxoSingle",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address or an array of addresses in cashAddr or legacy",
						"required": true,
						"example": "bchtest:qz35h5mfa8w2pqma2jq06lp7dnv5fxkp2svtllzmlf",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressUtxo"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/address/utxo": {
			"post": {
				"tags": [
					"address"
				],
				"summary": "Address utxo bulk",
				"description": "Returns the utxo of multiple addresses",
				"operationId": "utxoBulk",
				"requestBody": {
					"description": "Array of addresses",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Addresses"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressUtxoArray"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/address/unconfirmed/{address}": {
			"get": {
				"tags": [
					"address"
				],
				"summary": "Unconfirmed transactions for an address",
				"description": "Returns the list of unconfirmed transactions for an address",
				"operationId": "unconfirmedSingle",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address or an array of addresses in cashAddr or legacy",
						"required": true,
						"example": "bchtest:qz35h5mfa8w2pqma2jq06lp7dnv5fxkp2svtllzmlf",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressUnconfirmed"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/address/unconfirmed": {
			"post": {
				"tags": [
					"address"
				],
				"summary": "Unconfirmed transactions for array of addresses",
				"description": "Returns the list of unconfirmed transactions for an array of addresses",
				"operationId": "unconfirmedBulk",
				"requestBody": {
					"description": "Array of addresses",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Addresses"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressUtxoArray"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/address/transactions/{address}": {
			"get": {
				"tags": [
					"address"
				],
				"summary": "Transactions for an address",
				"description": "Returns the list of transactions for an address",
				"operationId": "transactionsSingle",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address in cashAddr or legacy",
						"required": true,
						"example": "bchtest:qz35h5mfa8w2pqma2jq06lp7dnv5fxkp2svtllzmlf",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid value/s - Null"
					}
				}
			}
		},
		"/address/transactions": {
			"post": {
				"tags": [
					"address"
				],
				"summary": "Transactions for an array of addresses",
				"description": "Returns the list of transactions for an array of addresses",
				"operationId": "transactionsBulk",
				"requestBody": {
					"description": "Array of addresses",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Addresses"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/address/fromXPub/{xpub}": {
			"get": {
				"tags": [
					"address"
				],
				"summary": "Address from extended public key and hdpath",
				"description": "Returns an address for an extended public key and hdpath",
				"operationId": "fromXPubSingle",
				"parameters": [
					{
						"name": "xpub",
						"in": "path",
						"description": "the extended public key",
						"required": true,
						"example": "tpubDHTK2jqg73w3GwoiHfAMbMYML1HN8FhrUxD9rFgbSgHXdwwrY6pAFqKDfUHhqw7vreaZty5hPGjb1S7ZPQeMmu6TFHAKfY9tJpYbvaGjPRM",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "hdPath",
						"in": "query",
						"description": "The HDPath. Defaults to the first BIP44 external change address",
						"required": false,
						"example": "",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid value/s - Null"
					}
				}
			}
		},
		"/block/detailsByHash/{hash}": {
			"get": {
				"tags": [
					"block"
				],
				"summary": "Block details single",
				"description": "Details about a single block by hash",
				"operationId": "detailsHashSingle",
				"parameters": [
					{
						"name": "hash",
						"in": "path",
						"description": "Block hash",
						"required": true,
						"example": "0000000000262e9a70fae6c38cc9a91af2819b04521d2e9e99b7ae0328ee429d",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockDetails"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid block hash.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid block hash."
								}
							}
						}
					}
				}
			}
		},
		"/block/detailsByHash": {
			"post": {
				"tags": [
					"block"
				],
				"summary": "Block details bulk",
				"description": "Details about multiple blocks by hashes",
				"operationId": "detailsHashBulk",
				"requestBody": {
					"description": "Array of hashes",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BlockHashes"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockDetails"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid block hash.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid block hash."
								}
							}
						}
					}
				}
			}
		},
		"/block/detailsByHeight/{height}": {
			"get": {
				"tags": [
					"block"
				],
				"summary": "Block details single",
				"description": "Details about a single block by height",
				"operationId": "detailsHeightSingle",
				"parameters": [
					{
						"name": "height",
						"in": "path",
						"description": "Block height",
						"required": true,
						"example": "500000",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockDetails"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid block height.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid block height."
								}
							}
						}
					}
				}
			}
		},
		"/block/detailsByHeight": {
			"post": {
				"tags": [
					"block"
				],
				"summary": "Block details bulk",
				"description": "Bulk details about blocks by heights",
				"operationId": "detailsHeightBulk",
				"requestBody": {
					"description": "Array of heights",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BlockHeights"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockDetails"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid block height.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid block height."
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getBestBlockHash": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Hash of the best block in the longest blockchain.",
				"description": "Returns the hash of the best (tip) block in the longest blockchain.",
				"operationId": "getBestBlockHash",
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BestBlockHash"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getBlockchainInfo": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Info regarding blockchain processing",
				"description": "Returns an object containing various state info regarding blockchain processing.",
				"operationId": "getBlockchainInfo",
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockchainInfo"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getBlockCount": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Number of blocks in the longest blockchain.",
				"description": "Returns the number of blocks in the longest blockchain.",
				"operationId": "getBlockCount",
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockCount"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getBlockHeader/{hash}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Information about blockheader hash",
				"description": "If verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'. If verbose is true, returns an Object with information about blockheader hash.",
				"operationId": "getBlockHeaderSingle",
				"parameters": [
					{
						"name": "hash",
						"in": "path",
						"description": "the block hash",
						"required": true,
						"example": "0000000000262e9a70fae6c38cc9a91af2819b04521d2e9e99b7ae0328ee429d",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "verbose",
						"in": "query",
						"description": "true for a json object, false for the hex encoded data",
						"required": false,
						"example": true,
						"schema": {
							"type": "boolean"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockHeader"
								}
							}
						}
					},
					"400": {
						"description": "Block not found",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Block not found"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getBlockHeader": {
			"post": {
				"tags": [
					"blockchain"
				],
				"summary": "Bulk information about blockheader hash",
				"description": "Bulk information about blockheader hash",
				"operationId": "getBlockHeaderBulk",
				"requestBody": {
					"description": "Array of hashes",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Hashes"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockHeader"
								}
							}
						}
					},
					"400": {
						"description": "Block not found",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Block not found"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getChainTips": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Information about all known tips in the block tree",
				"description": "Return information about all known tips in the block tree, including the main chain as well as orphaned branches.",
				"operationId": "getChainTips",
				"responses": {
					"200": {
						"description": "successful operation"
					}
				}
			}
		},
		"/blockchain/getDifficulty": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Proof-of-work difficulty",
				"description": "Returns the proof-of-work difficulty as a multiple of the minimum difficulty.",
				"operationId": "getDifficulty",
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Difficulty"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getMempoolEntry/{txid}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Mempool data for transaction",
				"description": "Returns mempool data for given transaction",
				"operationId": "getMempoolEntrySingle",
				"parameters": [
					{
						"name": "txid",
						"in": "path",
						"description": "the transaction id (must be in mempool)",
						"required": true,
						"example": "40112ab9d2b5f98427839272d7a1e23dd2afc6c8355626f373e076c2ab5c2f72",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Transaction not in mempool"
					}
				}
			}
		},
		"/blockchain/getMempoolEntry": {
			"post": {
				"tags": [
					"blockchain"
				],
				"summary": "Mempool data for transaction",
				"description": "Returns mempool data for given transaction",
				"operationId": "getMempoolEntryBulk",
				"requestBody": {
					"description": "Array of txids",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Txids"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Transaction not in mempool"
					}
				}
			}
		},
		"/blockchain/getMempoolInfo": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "The active state of the TX memory pool.",
				"description": "Returns details on the active state of the TX memory pool.",
				"operationId": "getMempoolInfo",
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MempoolInfo"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getRawMempool": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "All transaction ids in memory pool.",
				"description": "Returns all transaction ids in memory pool as a json array of string transaction ids.",
				"operationId": "getRawMempool",
				"parameters": [
					{
						"name": "verbose",
						"in": "query",
						"description": "True for a json object, false for array of transaction ids",
						"required": false,
						"example": true,
						"schema": {
							"type": "boolean"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RawMempool"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getTxOut/{txid}/{n}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Details about unspent transaction output.",
				"description": "Returns details about an unspent transaction output.",
				"operationId": "getTxOut",
				"parameters": [
					{
						"name": "txid",
						"in": "path",
						"description": "the transaction id",
						"required": true,
						"example": "40112ab9d2b5f98427839272d7a1e23dd2afc6c8355626f373e076c2ab5c2f72",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "n",
						"in": "path",
						"description": "vout number",
						"required": true,
						"example": 0,
						"schema": {
							"type": "number",
							"default": 0
						}
					},
					{
						"name": "mempool",
						"in": "query",
						"description": "Whether to include the mempool",
						"required": false,
						"example": "false",
						"schema": {
							"type": "boolean",
							"default": false
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid value/s - Null"
					}
				}
			}
		},
		"/blockchain/getTxOutProof/{txid}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Hex-encoded proof that single txid was included.",
				"description": "Returns a hex-encoded proof that 'txid' was included in a block.",
				"operationId": "getTxOutProofSingle",
				"parameters": [
					{
						"name": "txid",
						"in": "path",
						"description": "a txid string",
						"example": "40112ab9d2b5f98427839272d7a1e23dd2afc6c8355626f373e076c2ab5c2f72",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid tag value"
					}
				}
			}
		},
		"/blockchain/getTxOutProof": {
			"post": {
				"tags": [
					"blockchain"
				],
				"summary": "Hex-encoded proof that multiple txids wwere included.",
				"description": "Returns a hex-encoded proof that multiple txids were included in a block.",
				"operationId": "getTxOutProofBulk",
				"requestBody": {
					"description": "Array of txids",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Txids"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid tag value"
					}
				}
			}
		},
		"/blockchain/verifyTxOutProof/{proof}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Verify that a single proof points to a transaction in a block",
				"description": "Verifies that a proof points to a transaction in a block, returning the transaction it commits to and throwing an RPC error if the block is not in our best chain",
				"operationId": "verifyTxOutProofSingle",
				"parameters": [
					{
						"name": "proof",
						"in": "path",
						"description": "The hex-encoded proof generated by gettxoutproof",
						"example": "00000020166b6d1080a6d0a48a6c3556e275e86606ae217d7f9c53723b03000000000000a7b3c46a4c4b46cce03ebfe8b7cc32759e4f0dece66a20fb7d79577aadc8edf69425185cffff001d2261092aff00000009e8bfb50fb37d3f40b53eb8229f031a30e897aa9880d6b4db37cbb7c2b83b1e4f609b5095caa6d37d0a374b92e197fd424540f66999c0b6b50681a9ccf2e05ff2722f5cabc276e073f3265635c8c6afd23de2a1d77292832784f9b5d2b92a11408e66784a2e2183a898b03267c115da1b78cf0cd275d83c3cc22bb96940635c41669843b5c9211b26604659ad5943cf2b33217f69f6d67d728ee34bda219ede0a626804059d2540cd7f50114794c6ff18b6a790c671ba488525819c13fd32101932fd3506c9305134c6839c2945b8239ba52a60ac10577d6dc6b158e3c179bb91a7911dc11f8c5f052f808ef76c25ed638aaca31eb045a35ef00718718a0ad914607937c8c3dcee995ac145476cb4d83a4250f46c46990df568b6ee0796b3995f03bb0700",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid tag value"
					}
				}
			}
		},
		"/blockchain/verifyTxOutProof": {
			"post": {
				"tags": [
					"blockchain"
				],
				"summary": "Verify that bulk proofs point to transactions in a block",
				"description": "Verifies that bulk proofs point to transactions in a block",
				"operationId": "verifyTxOutProofBulk",
				"requestBody": {
					"description": "Array of proofs",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Proofs"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid tag value"
					}
				}
			}
		},
		"/control/getInfo": {
			"get": {
				"tags": [
					"control"
				],
				"summary": "Various state info.",
				"description": "Returns an object containing various state info.",
				"operationId": "getInfo",
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Info"
								}
							}
						}
					}
				}
			}
		},
		"/control/getNetworkInfo": {
			"get": {
				"tags": [
					"control"
				],
				"summary": "Various network info.",
				"description": "Returns an object containing various network info.",
				"operationId": "getNetworkInfo",
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NetworkInfo"
								}
							}
						}
					}
				}
			}
		},
		"/mining/getMiningInfo": {
			"get": {
				"tags": [
					"mining"
				],
				"summary": "Returns a json object containing mining-related information.",
				"description": "",
				"operationId": "getMiningInfo",
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MiningInfo"
								}
							}
						}
					}
				}
			}
		},
		"/mining/getNetworkHashps": {
			"get": {
				"tags": [
					"mining"
				],
				"summary": "Estimated network hashes per second",
				"description": "Returns the estimated network hashes per second based on the last n blocks. Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change. Pass in [height] to estimate the network speed at the time when a certain block was found.",
				"operationId": "getNetworkHashps",
				"parameters": [
					{
						"in": "query",
						"name": "nblocks",
						"description": "the number of blocks, or -1 for blocks since last difficulty change.",
						"required": false,
						"example": 120,
						"schema": {
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "height",
						"description": "to estimate at the time of the given height.",
						"required": false,
						"example": -1,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NetworkHashps"
								}
							}
						}
					}
				}
			}
		},
		"/rawtransactions/decodeRawTransaction/{hex}": {
			"get": {
				"tags": [
					"rawtransactions"
				],
				"summary": "Return the hex encoded transaction.",
				"description": "Return a JSON object representing the serialized, hex-encoded transaction.",
				"operationId": "decodeRawTransactionSingle",
				"parameters": [
					{
						"in": "path",
						"name": "hex",
						"description": "The transaction hex string",
						"required": true,
						"example": "02000000010e991f7ccec410f27d333f737f149b5d3be6728687da81072e638aed0063a176010000006b483045022100cd20443b0af090053450bc4ab00d563d4ac5955bb36e0135b00b8a96a19f233302205047f2c70a08c6ef4b76f2d198b33a31d17edfaa7e1e9e865894da0d396009354121024d4e7f522f67105b7bf5f9dbe557e7b2244613fdfcd6fe09304f93877328f6beffffffff02a0860100000000001976a9140ee020c07f39526ac5505c54fa1ab98490979b8388acb5f0f70b000000001976a9143a9b2b0c12fe722fcf653b6ef5dcc38732d6ff5188ac00000000",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DecodeRawTransaction"
								}
							}
						}
					},
					"400": {
						"description": "TX decode failed"
					}
				}
			}
		},
		"/rawtransactions/decodeRawTransaction": {
			"post": {
				"tags": [
					"rawtransactions"
				],
				"summary": "Return bulk hex encoded transaction.",
				"description": "Return bulk hex encoded transaction.",
				"operationId": "decodeRawTransactionBulk",
				"requestBody": {
					"description": "Array of hexes",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Hexes"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DecodeRawTransaction"
								}
							}
						}
					},
					"400": {
						"description": "TX decode failed"
					}
				}
			}
		},
		"/rawtransactions/decodeScript/{hex}": {
			"get": {
				"tags": [
					"rawtransactions"
				],
				"summary": "Decode a hex-encoded script.",
				"description": "Decode a hex-encoded script.",
				"operationId": "decodeScriptSingle",
				"parameters": [
					{
						"in": "path",
						"name": "hex",
						"description": "The hex encoded script",
						"required": true,
						"example": "02000000012d2ec73b12ecb96fbf104fa0325e39bc4e49818709594ba2128635aedfb820a1010000006a47304402203c63866eab7ffca27ed6437a028de9b2cc83dd1ed96f0f496742cf70c6ca50b8022007f3c7fc8729f52d8d0e626c6328012691fa6b3a317c66408e2ccc84a6538e9741210360cfc66fdacb650bc4c83b4e351805181ee696b7d5ab4667c57b2786f51c413dffffffff036a929800000000001976a914eb4b180def88e3f5625b2d8ae2c098ff7d85f66488ac00000000000000006a6a4c67087768630000003201000800000000426974636f696e2e636f6d00426974636f696e20466978656420546f6b656e20546573740054535400646576656c6f7065722e626974636f696e2e636f6d004d616465207769746820424954424f5800000000174876e80022020000000000001976a914eb4b180def88e3f5625b2d8ae2c098ff7d85f66488ac00000000",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DecodeScript"
								}
							}
						}
					},
					"400": {
						"description": "Argument must be hexadecimal string"
					}
				}
			}
		},
		"/rawtransactions/decodeScript": {
			"post": {
				"tags": [
					"rawtransactions"
				],
				"summary": "Decode multiple hex-encoded scripts.",
				"description": "Decode multiple hex-encoded scripts.",
				"operationId": "decodeScriptBulk",
				"requestBody": {
					"description": "Array of hexes",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Hexes"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "TX decode failed"
					}
				}
			}
		},
		"/rawtransactions/getRawTransaction/{txid}": {
			"get": {
				"tags": [
					"rawtransactions"
				],
				"summary": "Return the raw transaction data.",
				"description": "return the raw transaction data. If verbose is 'true', returns an Object with information about 'txid'. If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.",
				"operationId": "getRawTransactionSingle",
				"parameters": [
					{
						"in": "path",
						"name": "txid",
						"description": "The transaction id",
						"required": true,
						"example": "40112ab9d2b5f98427839272d7a1e23dd2afc6c8355626f373e076c2ab5c2f72",
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "verbose",
						"description": "If false, return a string, otherwise return a json object",
						"required": true,
						"example": true,
						"schema": {
							"type": "boolean"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetRawTransaction"
								}
							}
						}
					},
					"400": {
						"description": "Transaction not found"
					}
				}
			}
		},
		"/rawtransactions/getRawTransaction": {
			"post": {
				"tags": [
					"rawtransactions"
				],
				"summary": "Return raw transaction data for multiple transactions.",
				"description": "Return the raw transaction data for multiple transactions. If verbose is 'true', returns an Object with information about 'txid'. If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.",
				"operationId": "getRawTransactionBulk",
				"requestBody": {
					"description": "Array of txids",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RawTxids"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Transaction not found"
					}
				}
			}
		},
		"/rawtransactions/sendRawTransaction/{hex}": {
			"get": {
				"tags": [
					"rawtransactions"
				],
				"summary": "Submits single raw transactions to local node and network.",
				"description": "Submits single raw transaction (serialized, hex-encoded) to local node and network.",
				"operationId": "sendRawTransactionSingle",
				"parameters": [
					{
						"name": "hex",
						"in": "path",
						"description": "the raw transaction hex",
						"required": true,
						"example": "",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Transaction not found"
					}
				}
			}
		},
		"/rawtransactions/sendRawTransaction": {
			"post": {
				"tags": [
					"rawtransactions"
				],
				"summary": "Submits multiple raw transactions to local node and network.",
				"description": "Submits multiple raw transaction (serialized, hex-encoded) to local node and network.",
				"operationId": "sendRawTransactionBulk",
				"requestBody": {
					"description": "Array of raw tx hexes",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Hexes"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Transaction not found"
					}
				}
			}
		},
		"/transaction/details/{txid}": {
			"get": {
				"tags": [
					"transaction"
				],
				"summary": "Transaction details single",
				"description": "Details about a single transaction",
				"operationId": "transactionDetailsSingle",
				"parameters": [
					{
						"in": "path",
						"name": "txid",
						"description": "single txid or url encoded array of txids",
						"required": true,
						"example": "40112ab9d2b5f98427839272d7a1e23dd2afc6c8355626f373e076c2ab5c2f72",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransactionDetails"
								}
							}
						}
					},
					"400": {
						"description": "Transaction not found"
					}
				}
			}
		},
		"/transaction/details": {
			"post": {
				"tags": [
					"transaction"
				],
				"summary": "Transaction details bulk",
				"description": "Bulk Details about a transaction",
				"operationId": "transactionDetailsBulk",
				"requestBody": {
					"description": "Array of txids",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Txids"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransactionDetails"
								}
							}
						}
					},
					"400": {
						"description": "Transaction not found"
					}
				}
			}
		},
		"/util/validateAddress/{address}": {
			"get": {
				"tags": [
					"util"
				],
				"summary": "Information about single bitcoin cash address.",
				"description": "Return information about single bitcoin cash address.",
				"operationId": "validateAddressSingle",
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"description": "The bitcoin address to validate",
						"required": true,
						"example": "bchtest:qz35h5mfa8w2pqma2jq06lp7dnv5fxkp2svtllzmlf",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateAddress"
								}
							}
						}
					},
					"400": {
						"description": "Invalid Address"
					}
				}
			}
		},
		"/util/validateAddress": {
			"post": {
				"tags": [
					"util"
				],
				"summary": "Information about bulk bitcoin cash addresses.",
				"description": "Return information about bulk bitcoin cash addresses.",
				"operationId": "validateAddressBulk",
				"requestBody": {
					"description": "Array of Addresses",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Addresses"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateAddress"
								}
							}
						}
					},
					"400": {
						"description": "Invalid Address"
					}
				}
			}
		},
		"/slp/list": {
			"get": {
				"tags": [
					"slp"
				],
				"summary": "list",
				"description": "List all SLP tokens",
				"operationId": "listAll",
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			},
			"post": {
				"tags": [
					"slp"
				],
				"summary": "list token information",
				"description": "List multiple SLP tokens by id",
				"operationId": "listBulk",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SLPListBulk"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/slp/list/{tokenId}": {
			"get": {
				"tags": [
					"slp"
				],
				"summary": "list token",
				"description": "List single SLP token by id",
				"operationId": "listSingle",
				"parameters": [
					{
						"name": "tokenId",
						"in": "path",
						"description": "The token id",
						"required": true,
						"example": "650dea14c77f4d749608e36e375450c9ac91deb8b1b53e50cb0de2059a52d19a",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/slp/convert/{address}": {
			"get": {
				"tags": [
					"slp"
				],
				"summary": "convert address to slpAddr, cashAddr and legacy",
				"description": "convert address to slpAddr, cashAddr and legacy",
				"operationId": "convert",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "The slp address",
						"required": true,
						"example": "",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/slp/convert": {
			"post": {
				"tags": [
					"slp"
				],
				"summary": "convert address to slpAddr, cashAddr and legacy",
				"description": "convert address to slpAddr, cashAddr and legacy",
				"operationId": "convertBulk",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SLPConvert"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/slp/balancesForAddress/{address}": {
			"get": {
				"tags": [
					"slp"
				],
				"summary": "list slp balances for single address",
				"description": "List SLP token balances for single address",
				"operationId": "balancesForAddressSingle",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "The slp address",
						"required": true,
						"example": "slptest:qz35h5mfa8w2pqma2jq06lp7dnv5fxkp2shlcycvd5",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/slp/balancesForAddress": {
			"post": {
				"tags": [
					"slp"
				],
				"summary": "list slp balances for bulk addresses",
				"description": "List SLP token balances for bulk addresses",
				"operationId": "balancesForAddressBulk",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SLPAddresses"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/slp/balancesForToken/{tokenId}": {
			"get": {
				"tags": [
					"slp"
				],
				"summary": "list SLP addresses and balances for tokenId",
				"description": "List SLP addresses and balances for tokenId",
				"operationId": "balancesForTokenSingle",
				"parameters": [
					{
						"name": "tokenId",
						"in": "path",
						"description": "The slp tokenId",
						"required": true,
						"example": "df808a41672a0a0ae6475b44f272a107bc9961b90f29dc918d71301f24fe92fb",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/slp/balancesForToken": {
			"post": {
				"tags": [
					"slp"
				],
				"summary": "list SLP addresses and balances for bulk tokenIds",
				"description": "List SLP addresses and balances for bulk tokenIds",
				"operationId": "balancesForTokenBulk",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SLPTokenIds"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/slp/balance/{address}/{tokenId}": {
			"get": {
				"tags": [
					"slp"
				],
				"summary": "list single slp token balance for address",
				"description": "List single SLP token balance for address",
				"operationId": "balanceForAddressSingle",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "The slp address",
						"required": true,
						"example": "simpleledger:qz9tzs6d5097ejpg279rg0rnlhz546q4fsnck9wh5m",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "tokenId",
						"in": "path",
						"description": "The token id",
						"required": true,
						"example": "1cda254d0a995c713b7955298ed246822bee487458cd9747a91d9e81d9d28125",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/slp/balance": {
			"post": {
				"tags": [
					"slp"
				],
				"summary": "list bulk slp token balances for addresses",
				"description": "List bulk SLP token balances for addresses",
				"operationId": "balanceForAddressBulk",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BalanceAddresses"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/slp/validateTxid/{txid}": {
			"get": {
				"tags": [
					"slp"
				],
				"summary": "Validate single txid",
				"description": "Validate single txid",
				"operationId": "validateTxidSingle",
				"parameters": [
					{
						"name": "txid",
						"in": "path",
						"description": "The txid",
						"required": true,
						"example": "1cda254d0a995c713b7955298ed246822bee487458cd9747a91d9e81d9d28125",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/slp/validateTxid": {
			"post": {
				"tags": [
					"slp"
				],
				"summary": "Validate multiple txids",
				"description": "Validate multiple txids",
				"operationId": "validateTxidBulk",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SLPTxids"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/slp/tokenStats/{tokenId}": {
			"get": {
				"tags": [
					"slp"
				],
				"summary": "List stats for a single slp token",
				"description": "List stats for a single slp token",
				"operationId": "singleTokenStats",
				"parameters": [
					{
						"name": "tokenId",
						"in": "path",
						"description": "The token id",
						"required": true,
						"example": "df808a41672a0a0ae6475b44f272a107bc9961b90f29dc918d71301f24fe92fb",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/slp/tokenStats": {
			"post": {
				"tags": [
					"slp"
				],
				"summary": "List stats for multiple slp tokens",
				"description": "List stats for multiple slp tokens",
				"operationId": "bulkTokenStats",
				"requestBody": {
					"description": "Array of tokenIds",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SLPTokenIds"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/slp/txDetails/{txid}": {
			"get": {
				"tags": [
					"slp"
				],
				"summary": "SLP transaction details",
				"description": "Transaction details on a token transfer.",
				"operationId": "txDetails",
				"parameters": [
					{
						"name": "txid",
						"in": "path",
						"description": "The BCH transaction ID",
						"required": true,
						"example": "57b3082a2bf269b3d6f40fee7fb9c664e8256a88ca5ee2697c05b9457822d446",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/slp/transactions/{tokenId}/{address}": {
			"get": {
				"tags": [
					"slp"
				],
				"summary": "SLP transactions by tokenId and address",
				"description": "Transactions by tokenId and address.",
				"operationId": "txsTokenIdAddressSingle",
				"parameters": [
					{
						"name": "tokenId",
						"in": "path",
						"description": "The BCH tokenId",
						"required": true,
						"example": "495322b37d6b2eae81f045eda612b95870a0c2b6069c58f70cf8ef4e6a9fd43a",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "address",
						"in": "path",
						"description": "The slp address",
						"required": true,
						"example": "simpleledger:qrhvcy5xlegs858fjqf8ssl6a4f7wpstaqnt0wauwu",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/slp/transactions": {
			"post": {
				"tags": [
					"slp"
				],
				"summary": "Bulk SLP transactions by tokenId and address",
				"description": "Bulk Transactions by tokenId and address.",
				"operationId": "txsTokenIdAddressBulk",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BalanceAddresses"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/slp/burnTotal/{transactionId}": {
			"get": {
				"tags": [
					"slp"
				],
				"summary": "Total burn count for slp transactions",
				"description": "total input, ouput and burn counts by transaction Id.",
				"operationId": "burnTotalSingle",
				"parameters": [
					{
						"name": "transactionId",
						"in": "path",
						"description": "The SLP transactionId",
						"required": true,
						"example": "2c90f44dbb0a3257ded2c30d46d387490aee61eecd168534c8b645ffe21cbc50",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/slp/burnTotal": {
			"post": {
				"tags": [
					"slp"
				],
				"summary": "Total burn count for slp transactions",
				"description": "total input, ouput and burn counts by transaction Id.",
				"operationId": "burnTotalBulk",
				"requestBody": {
					"description": "Array of transactionIds",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Txids"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/cashAccounts/lookup/{account}/{number}/{collision}": {
			"get": {
				"tags": [
					"cashAccounts"
				],
				"summary": "Lookup Cash Account by account, number and optional collision hash",
				"description": "Lookup Cash Account by account, number and optional collision hash",
				"operationId": "cashAccountsLookup",
				"parameters": [
					{
						"name": "account",
						"in": "path",
						"description": "The account",
						"required": true,
						"example": "cgcardona",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "number",
						"in": "path",
						"description": "The number",
						"required": true,
						"example": "122",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "collision",
						"in": "path",
						"description": "The collision hash",
						"required": false,
						"example": "6383276713",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/cashAccounts/check/{account}/{number}": {
			"get": {
				"tags": [
					"cashAccounts"
				],
				"summary": "get multiple Cash Accounts block height and inclusion proof for independent verification ",
				"description": "get multiple Cash Accounts block height and inclusion proof for independent verification ",
				"operationId": "cashAccountsCheck",
				"parameters": [
					{
						"name": "account",
						"in": "path",
						"description": "The account",
						"required": true,
						"example": "cgcardona",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "number",
						"in": "path",
						"description": "The number",
						"required": true,
						"example": "122",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/cashAccounts/reverselookup/{address}": {
			"get": {
				"tags": [
					"cashAccounts"
				],
				"summary": "get Cash Accounts associated with the address provided.",
				"description": "get Cash Accounts associated with the address provided.",
				"operationId": "cashAccountsReverseLookup",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "The BCH/SLP address",
						"required": true,
						"example": "bitcoincash:qr4aadjrpu73d2wxwkxkcrt6gqxgu6a7usxfm96fst",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		}
	}
}